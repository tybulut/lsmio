#!/usr/bin/env python3
#
# Copyright 2023 Serdar Bulut
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions are met:
# 
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 
# 3. Neither the name of the copyright holder nor the names of its
#    contributors may be used to endorse or promote products derived from
#    this software without specific prior written permission.
# 
# THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
# AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
# IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
# ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
# LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
# 

import os
import sys
import getopt
import site

preferred = os.path.realpath("/opt/homebrew/bin/python3")
fallback = os.path.realpath("/usr/bin/python3")

# Check if preferred interpreter is available
if os.access(preferred, os.X_OK):
    if os.path.exists(preferred):
        exec_path = os.path.realpath(sys.executable)
        if exec_path != preferred:
            os.execvp(preferred, [preferred] + sys.argv)
    elif os.path.exists(fallback):
        exec_path = os.path.realpath(sys.executable)
        if exec_path != fallback:
            os.execvp(fallback, [fallback] + sys.argv)
    else:
        raise EnvironmentError("No suitable Python interpreter found.")

# Calculate server path
srv_path = os.path.join(os.path.dirname(os.path.abspath(__file__)), '..')
sys.path.append(srv_path)

from lsmiotool.lib import log
log.Log.setLevel(log.LOG_LEVEL.WARNING)  # Default log level
log.Console.debug("Starting lsmiotool...")

from lsmiotool.lib import env, main, hpc

LSMIOTOOL_HELP = '''How to run
-----------------------------------------------------------------------
./lsmiotool [options] <cmd> <cmd-arguments>

common cmds:
  load-modules  load needed HPC modules
  parse <ior|lsmio|lmp> <local|bake|small|large>
  run <ior|lsmio|lmp> <local|bake|small|large>

other cmds:
  latex <viking|viking2|isambard>
  shell       provide interactive access to the python tool
  test        run lsmiotool unit and functional tests

options:
  --debug     enable debug mode and run
  --help      print this help screen
  --ssd       use SSD storage instead
  --version   print version and exit
'''

if __name__ == '__main__':
    debug = False
    try:
        opts, args = getopt.getopt(sys.argv[1:], 'dhstv',
                ['debug', 'help', 'ssd', 'test', 'version'])
        for opt, arg in opts:
            if opt in '--help':
                log.Console.dump(LSMIOTOOL_HELP)
                sys.exit(1)
            elif opt in '--version':
                log.Console.info('version: ' + config.VERSION)
                sys.exit(1)
            elif opt in '--debug':
                debug = True
                log.Log.setLevel(log.LOG_LEVEL.DEBUG)
            else:
                log.Console.error('Unknown option: ' + opt)
                sys.exit(1)
    except getopt.GetoptError as err:
        log.Console.error(err)
        sys.exit(1)

    m_args = []
    m_kwargs = {}

    if not args:
        log.Console.error('Empty command.')
        sys.exit(1)
    elif args[0] == 'latex':
        m_args = args[1:]
        if not m_args:
            log.Console.error('Latex: Needs argument such as viking, viking2, ...')
            sys.exit(1)
        class_main = main.LatexMain
    elif args[0] == 'load-modules':
        class_main = main.HpcEnvMain
    elif args[0] == 'parse':
        class_main = main.NotImplemented
    elif args[0] == 'run':
        m_args = args[1:]
        if len(m_args) != 2:
            log.Console.error('Run: Needs two arguments: <ior|lsmio|lmp> <local|bake|small|large>')
            sys.exit(1)
        class_main = main.RunMain
    elif args[0] == 'shell':
        class_main = main.ShellMain
    elif args[0] == 'test':
        class_main = main.TestMain
    else:
        log.Console.error('Unknown command: ' + str(args))
        sys.exit(1)

    inst_main = class_main(*m_args, **m_kwargs)
    inst_main.run()

